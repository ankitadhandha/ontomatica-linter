#!/usr/bin/env ruby
require 'rubygems'
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
require "bundler/setup"
require_relative '../lib/rdf/linter'
require 'getoptlong'
require 'open-uri'

include RDF::Linter::Parser

def run(options)
  start = Time.new

  options[:logger] = ::Logger.new(StringIO.new) if options[:quiet]
  graph, lint_messages, base_uri = parse(options)
  options[:output].puts options[:lint] ? (lint_messages.empty? ? 'ok' : lint_messages.to_json(JSON::LD::JSON_STATE)) : graph.dump(:ttl)
  STDERR.puts unless options[:quiet]
  secs = Time.new - start
rescue SignalException => e
    raise e
rescue Exception => e
  if options[:quiet]
    options[:output].puts("Error: #{e.message}")
  else
    STDERR.puts("Error in #{options.inspect}")
    raise
  end
end

options = {
  verbose: false,
  strict: true,
  output: STDOUT,
}
input = nil

opts = GetoptLong.new(
  ["--dbg", GetoptLong::NO_ARGUMENT],
  ["--rdfa-dbg", GetoptLong::NO_ARGUMENT],
  ["--microdata-dbg", GetoptLong::NO_ARGUMENT],
  ["--jsonld-dbg", GetoptLong::NO_ARGUMENT],
  ["--execute", "-e", GetoptLong::REQUIRED_ARGUMENT],
  ["--format", GetoptLong::REQUIRED_ARGUMENT],
  ["--output", "-o", GetoptLong::REQUIRED_ARGUMENT],
  ["--lint", GetoptLong::NO_ARGUMENT],
  ["--quiet", GetoptLong::NO_ARGUMENT],
  ["--uri", GetoptLong::REQUIRED_ARGUMENT],
  ["--verbose", GetoptLong::NO_ARGUMENT]
)
opts.each do |opt, arg|
  case opt
  when '--dbg'            then ::RDF::Linter::debug = true
  when '--jsonld-dbg'     then ::JSON::LD::debug = true
  when '--rdfa-dbg'       then ::RDF::RDFa::debug = true
  when '--microdata-dbg'  then ::RDF::Microdata::debug = true
  when '--execute'        then input = arg
  when '--format'         then options[:output_format] = arg.to_sym
  when '--lint'           then options[:lint] = true
  when '--output'         then options[:output] = File.open(arg, "w")
  when '--quiet'          then options[:quiet] = true
  when '--uri'            then options[:base_uri] = arg
  when '--verbose'        then options[:verbose] = true
  end
end

if ARGV.empty?
  run({content: input || $stdin, base_uri: "http://example/"}.merge(options))
else
  ARGV.each do |test_file|
    options[:output].write "#{test_file}#{options[:quiet] ? ': ' : "\n"}"
    options[:base_uri] = RDF::URI("file://#{File.expand_path("../..", __FILE__)}/").join(test_file)
    options[:file_name] = test_file
    run(options)
  end
end
